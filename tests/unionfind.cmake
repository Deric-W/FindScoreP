include("${CMAKE_CURRENT_LIST_DIR}/utils.cmake")
include(ScorePUtilities)

set(TEST_ELEMENTS "")

_scorep_unionfind_makeset(TEST x)
_scorep_unionfind_makeset(TEST y)
_scorep_unionfind_makeset(TEST z)
_check_lists_equal("${TEST_ELEMENTS}" "x;y;z")

foreach(element x y z)
    _scorep_unionfind_find(TEST "${element}" result)
    if(NOT result STREQUAL element)
        message(FATAL_ERROR "result '${result}' not equal to '${element}'")
    endif()
endforeach()
_scorep_unionfind_find(TEST w result)
if(NOT result STREQUAL "result-NOTFOUND")
    message(FATAL_ERROR "result '${result}' not equal to 'result-NOTFOUND'")
endif()

_scorep_unionfind_union(TEST x y)
_scorep_unionfind_find(TEST x resultX)
_scorep_unionfind_find(TEST y resultY)
if(NOT resultX STREQUAL resultY)
    message(FATAL_ERROR "find returns different results: '${resultX}' and '${resultY}'")
endif()
if(NOT "TEST_${resultX}_SIZE" STREQUAL 2)
    message(FATAL_ERROR "invalid size '${TEST_${resultX}_SIZE}'")
endif()

_scorep_unionfind_union(TEST "${resultX}" z)
_scorep_unionfind_find(TEST x resultX)
_scorep_unionfind_find(TEST y resultY)
_scorep_unionfind_find(TEST z resultZ)
if(NOT (resultX STREQUAL resultY AND resultY STREQUAL resultZ))
    message(FATAL_ERROR "find returns different results: '${resultX}', '${resultY}' and '${resultZ}'")
endif()
if(NOT "TEST_${resultX}_SIZE" STREQUAL 3)
    message(FATAL_ERROR "invalid size '${TEST_${resultX}_SIZE}'")
endif()
if(TEST_z_PARENT STREQUAL "z")
    message(FATAL_ERROR "invalid union by size, z has parent '${TEST_z_PARENT}'")
endif()
