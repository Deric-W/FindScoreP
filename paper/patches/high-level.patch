diff --git a/CMakeLists.txt b/CMakeLists.txt
index f5d62dfe2c..06963cd3b4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1032,3 +1032,58 @@ ADD_CUSTOM_TARGET(uninstall
 ###########################
 set_directory_properties(PROPERTIES
             ADDITIONAL_MAKE_CLEAN_FILES "install_manifest.txt")
+
+#######################
+## Score-P
+#######################
+option(ENABLE_SCOREP "Enable Score-P instrumentation" OFF)
+if(ENABLE_SCOREP)
+    include(ScorePUtilities)
+
+	scorep_discover_targets(allTargets)
+    scorep_discover_targets(targets src api)
+    set(targetsToInstrument "")
+    foreach(target ${targets})
+    	if(NOT target MATCHES "test")
+    		list(APPEND targetsToInstrument "${target}")
+    	endif()
+    endforeach()
+    
+    if(GMX_OPENMP)
+    	# prevent Opari2 instrumentation
+    	scorep_mark(INSTRUMENT "${targetsToInstrument}" LANGS CXX ARGUMENTS "--compiler" "--thread=omp:ompt" AUTO)
+    else()
+    	scorep_mark(INSTRUMENT "${targetsToInstrument}" LANGS CXX ARGUMENTS "--compiler" AUTO)
+    endif()
+    scorep_determine_instrumentations("${allTargets}" COMPONENTS_VAR scorepComponents)
+    scorep_infer_components(CXX inferredComponents)
+    list(APPEND scorepComponents ${inferredComponents})
+    list(REMOVE_DUPLICATES scorepComponents)
+    find_package(ScoreP REQUIRED COMPONENTS ${scorepComponents})
+    scorep_enable("${allTargets}")
+
+    # workaround for Score-P bug
+    get_target_property(scorepArguments libgromacs SCOREP_CXX_ARGUMENTS)
+    set_property(TARGET libgromacs PROPERTY CXX_LINKER_LAUNCHER)
+    execute_process(
+        COMMAND "${SCOREP_CONFIG_EXECUTABLE}" ${scorepArguments} --ldflags
+        OUTPUT_VARIABLE ldflags
+        COMMAND_ERROR_IS_FATAL ANY
+    )
+    execute_process(
+        COMMAND "${SCOREP_CONFIG_EXECUTABLE}" ${scorepArguments} --event-libs
+        OUTPUT_VARIABLE eventLibs
+        COMMAND_ERROR_IS_FATAL ANY
+    )
+    execute_process(
+        COMMAND "${SCOREP_CONFIG_EXECUTABLE}" ${scorepArguments} --mgmt-libs
+        OUTPUT_VARIABLE mgmtLibs
+        COMMAND_ERROR_IS_FATAL ANY
+    )
+    string(REGEX REPLACE "[     ]+" ";" ldflags "${ldflags}")
+    string(REGEX REPLACE "[     ]+" ";" eventLibs "${eventLibs}")
+    string(REGEX REPLACE "[     ]+" ";" mgmtLibs "${mgmtLibs}")
+    target_link_options(libgromacs BEFORE PRIVATE ${ldflags})
+    target_link_libraries(libgromacs PRIVATE ${eventLibs})
+    target_link_libraries(libgromacs PRIVATE ${mgmtLibs})
+endif()
diff --git a/cmake/gmxManageMPI.cmake b/cmake/gmxManageMPI.cmake
index ca3635c1a7..28a8e7545b 100644
--- a/cmake/gmxManageMPI.cmake
+++ b/cmake/gmxManageMPI.cmake
@@ -94,7 +94,7 @@ if (GMX_LIB_MPI)
     endif ()
     #TODO(#3672, #3776): These should be acquired through the MPI::MPI_CXX target.
     include_directories(SYSTEM ${MPI_CXX_INCLUDE_PATH})
-    list(APPEND GMX_COMMON_LIBRARIES ${MPI_CXX_LIBRARIES})
+    list(APPEND GMX_COMMON_LIBRARIES ${MPI_CXX_LIBRARIES} MPI::MPI_CXX)
 endif ()
 
 # Identify particular MPI implementations of interest (for compatibility checks).
