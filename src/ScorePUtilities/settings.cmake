# Copyright 2024 Eric Niklas Wolf
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0


# Internal function which converts a language and set CMake Variables into Score-P setting variables with a prefix.
function(_scorep_environment2settings language priority prefix)
    foreach(setting ${_SCOREP_FLAG_SETTINGS} ${_SCOREP_CHOICE_SETTINGS} ${_SCOREP_UNION_SETTINGS})
        set("SETTING_${setting}" "")
    endforeach()
    if(UNIX)
        set("SETTING_io" "${priority};posix")
    endif()
    if(language STREQUAL "CUDA")
        set("SETTING_cuda" "${priority};TRUE")
    elseif(language STREQUAL "HIP")
        set("SETTING_hip" "${priority};TRUE")
    endif()
    foreach(setting ${_SCOREP_FLAG_SETTINGS} ${_SCOREP_CHOICE_SETTINGS} ${_SCOREP_UNION_SETTINGS})
        set("${prefix}_${setting}" "${SETTING_${setting}}" PARENT_SCOPE)
    endforeach()
endfunction()

# Internal macro to create empty settings in the parent scope to be selectively overridden.
macro(_scorep_empty_settings_parent)
    set("${emptyVar}" FALSE PARENT_SCOPE)
    foreach(setting IN LISTS _SCOREP_FLAG_SETTINGS _SCOREP_CHOICE_SETTINGS _SCOREP_UNION_SETTINGS)
        set("${prefix}_${setting}" "" PARENT_SCOPE)
    endforeach()
endmacro()

# Internal function which converts a dependency into Score-P setting variables with a prefix if they are not empty.
function(_scorep_link_dependency2settings dependency language priority prefix emptyVar)
    if(DEFINED "OpenMP_${language}_FOUND" AND dependency STREQUAL "OpenMP::OpenMP_${language}")
        _scorep_empty_settings_parent()
        set("${prefix}_thread" "${priority};omp" PARENT_SCOPE)
    elseif(DEFINED "CMAKE_USE_PTHREADS_INIT" AND dependency STREQUAL "Threads::Threads")
        _scorep_empty_settings_parent()
        set("${prefix}_thread" "${priority};pthread" PARENT_SCOPE)
    elseif(DEFINED "MPI_${language}_FOUND" AND dependency STREQUAL "MPI::MPI_${language}")
        _scorep_empty_settings_parent()
        set("${prefix}_mpp" "${priority};mpi" PARENT_SCOPE)
    elseif(DEFINED "OpenCL_FOUND" AND dependency STREQUAL "OpenCL::OpenCL")
        _scorep_empty_settings_parent()
        set("${prefix}_opencl" "${priority};TRUE" PARENT_SCOPE)
    elseif(DEFINED "OpenACC_${language}_FOUND" AND dependency STREQUAL "OpenACC::OpenACC_${language}")
        _scorep_empty_settings_parent()
        set("${prefix}_openacc" "${priority};TRUE" PARENT_SCOPE)
    elseif(dependency STREQUAL "Kokkos::kokkos")
        _scorep_empty_settings_parent()
        set("${prefix}_kokkos" "${priority};TRUE" PARENT_SCOPE)
        if(DEFINED "Kokkos_ENABLE_OPENMP")
            set("${prefix}_thread" "${priority};omp;ompt" PARENT_SCOPE)
            set("${prefix}_openmp" "${priority};FALSE" PARENT_SCOPE)
        endif()
        if(DEFINED "Kokkos_ENABLE_CUDA")
            set("${prefix}_cuda" "${priority};TRUE" PARENT_SCOPE)
        endif()
        if(DEFINED "Kokkos_ENABLE_HIP")
            set("${prefix}_hip" "${priority};TRUE" PARENT_SCOPE)
        endif()
    else()
        set("${emptyVar}" TRUE PARENT_SCOPE)
    endif()
endfunction()

# Internal function used to determine wether the second argument value SUPERSEDES, is SUPERSEDED or is a CONFLICT.
function(_scorep_compare_argument_values priority1 value1 variant1 priority2 value2 variant2 result)
    if(priority2 STREQUAL "" OR priority2 GREATER priority1)
        set("${result}" SUPERSEDED PARENT_SCOPE)
    elseif(priority1 STREQUAL "" OR priority1 GREATER priority2)
        set("${result}" SUPERSEDES PARENT_SCOPE)
    else()
        if(value2 STREQUAL "")
            set("${result}" SUPERSEDED PARENT_SCOPE)
        elseif(value1 STREQUAL "")
            set("${result}" SUPERSEDES PARENT_SCOPE)
        elseif(value1 STREQUAL value2)
            if(variant2 STREQUAL "")
                set("${result}" SUPERSEDED PARENT_SCOPE)
            elseif(variant1 STREQUAL "")
                set("${result}" SUPERSEDES PARENT_SCOPE)
            elseif(variant1 STREQUAL variant2)
                set("${result}" SUPERSEDED PARENT_SCOPE)
            else()
                set("${result}" CONFLICT PARENT_SCOPE)
            endif()
        else()
            set("${result}" CONFLICT PARENT_SCOPE)
        endif()
    endif()
endfunction()

# Internal function used to determine wether the second argument value SUPERSEDES, is SUPERSEDED or is a CONFLICT in cause of an existing conflict.
function(_scorep_compare_conflict_values priority1 priority2 result)
    if(priority2 STREQUAL "" OR priority2 GREATER priority1)
        set("${result}" SUPERSEDED PARENT_SCOPE)
    elseif(priority1 STREQUAL "" OR priority1 GREATER priority2)
        set("${result}" SUPERSEDES PARENT_SCOPE)
    else()
        set("${result}" CONFLICT PARENT_SCOPE)
    endif()
endfunction()

# Internal function which transforms Score-P arguments into setting variables with a prefix.
function(_scorep_arguments2settings arguments priority prefix)
    foreach(setting ${_SCOREP_FLAG_SETTINGS} ${_SCOREP_CHOICE_SETTINGS} ${_SCOREP_UNION_SETTINGS})
        set("SETTING_${setting}" "")
    endforeach()
    foreach(argument ${arguments})
        set(handled FALSE)
        foreach(enablearg ${_SCOREP_FLAG_SETTINGS})
            if(argument MATCHES "^--${enablearg}((:|=)(.*))?$")
                if(CMAKE_MATCH_COUNT EQUAL 0)
                    set("SETTING_${enablearg}" "${priority};TRUE")
                else()
                    set("SETTING_${enablearg}" "${priority};TRUE;${CMAKE_MATCH_2};${CMAKE_MATCH_3}")
                endif()
            elseif(argument STREQUAL "--no${enablearg}")
                set("SETTING_${enablearg}" "${priority};FALSE")
            else()
                continue()
            endif()
            set(handled TRUE)
            break()
        endforeach()
        foreach(paradigmarg ${_SCOREP_CHOICE_SETTINGS})
            if(argument MATCHES "^--${paradigmarg}=([^:]+)(:(.*))?$")
                if(CMAKE_MATCH_COUNT EQUAL 1)
                    set("SETTING_${paradigmarg}" "${priority};${CMAKE_MATCH_1}")
                else()
                    set("SETTING_${paradigmarg}" "${priority};${CMAKE_MATCH_1};${CMAKE_MATCH_3}")
                endif()
                set(handled TRUE)
                break()
            endif()
        endforeach()
        if(argument MATCHES "^--io=(.*)$")
            string(REPLACE "," ";" value "${CMAKE_MATCH_1}")
            set("SETTING_io" "${priority};${value}")
            set(handled TRUE)
        endif()
        if(NOT handled)
            if(SETTING_other STREQUAL "")
                set("SETTING_other" "${priority}")
            endif()
            list(APPEND SETTING_other "${argument}")
        endif()
    endforeach()
    foreach(setting ${_SCOREP_FLAG_SETTINGS} ${_SCOREP_CHOICE_SETTINGS} ${_SCOREP_UNION_SETTINGS})
        set("${prefix}_${setting}" "${SETTING_${setting}}" PARENT_SCOPE)
    endforeach()
endfunction()

# Internal function which merges the setting variables with prefix1 or prefix2 into setting variables with prefix.
function(_scorep_merge_settings prefix1 prefix2 prefix)
    foreach(setting ${_SCOREP_FLAG_SETTINGS} ${_SCOREP_CHOICE_SETTINGS} ${_SCOREP_UNION_SETTINGS})
        set("SETTING_${setting}" "")
    endforeach()
    foreach(enablearg ${_SCOREP_FLAG_SETTINGS})
        foreach(i 1 2)
            set(priority${i} "")
            set(value${i} "")
            set(variant${i} "")
            set(isconflict${i} FALSE)
            if(${prefix${i}}_${enablearg} MATCHES "^([0-9]+);([^;]+)(;[^;]*;(.*))?$")
                set(priority${i} "${CMAKE_MATCH_1}")
                if(CMAKE_MATCH_2)
                    set(value${i} TRUE)
                    if(CMAKE_MATCH_COUNT EQUAL 4)
                        set(variant${i} "${CMAKE_MATCH_4}")
                    endif()
                else()
                    set(value${i} FALSE)
                endif()
            elseif(${prefix${i}}_${enablearg} MATCHES "^CONFLICT;([0-9]+);")
                set(priority${i} "${CMAKE_MATCH_1}")
                set(isconflict${i} TRUE)
            endif()
        endforeach()
        if(priority1 STREQUAL "" AND priority2 STREQUAL "")
            continue()
        elseif(isconflict1 OR isconflict2)
            _scorep_compare_conflict_values("${priority1}" "${priority2}" status)
        else()
            _scorep_compare_argument_values("${priority1}" "${value1}" "${variant1}" "${priority2}" "${value2}" "${variant2}" status)
        endif()
        if(status STREQUAL "SUPERSEDES")
            set("SETTING_${enablearg}" "${${prefix2}_${enablearg}}")
        elseif(status STREQUAL "SUPERSEDED")
            set("SETTING_${enablearg}" "${${prefix1}_${enablearg}}")
        else()
            set(
                "SETTING_${enablearg}"
                "CONFLICT;${priority1};Score-P: failed to merge settings '${${prefix1}_${enablearg}}' and '${${prefix2}_${enablearg}}' for setting '${enablearg}'"
            )
        endif()
    endforeach()
    foreach(paradigmarg ${_SCOREP_CHOICE_SETTINGS})
        foreach(i 1 2)
            set(priority${i} "")
            set(value${i} "")
            set(variant${i} "")
            set(isconflict${i} FALSE)
            if(${prefix${i}}_${paradigmarg} MATCHES "^([0-9]+);([^;]*)(;(.*))?$")
                set(priority${i} "${CMAKE_MATCH_1}")
                set(value${i} "${CMAKE_MATCH_2}")
                if(CMAKE_MATCH_COUNT EQUAL 4)
                    set(variant${i} "${CMAKE_MATCH_4}")
                endif()
            elseif(${prefix${i}}_${paradigmarg} MATCHES "^CONFLICT;([0-9]+);")
                set(priority${i} "${CMAKE_MATCH_1}")
                set(isconflict${i} TRUE)
            endif()
        endforeach()
        if(priority1 STREQUAL "" AND priority2 STREQUAL "")
            continue()
        elseif(isconflict1 OR isconflict2)
            _scorep_compare_conflict_values("${priority1}" "${priority2}" status)
        else()
            _scorep_compare_argument_values("${priority1}" "${value1}" "${variant1}" "${priority2}" "${value2}" "${variant2}" status)
        endif()
        if(status STREQUAL "SUPERSEDES")
            set("SETTING_${paradigmarg}" "${${prefix2}_${paradigmarg}}")
        elseif(status STREQUAL "SUPERSEDED")
            set("SETTING_${paradigmarg}" "${${prefix1}_${paradigmarg}}")
        else()
            set(
                "SETTING_${paradigmarg}"
                "CONFLICT;${priority1};Score-P: failed to merge settings '${${prefix1}_${paradigmarg}}' and '${${prefix2}_${paradigmarg}}' for setting '${paradigmarg}'"
            )
        endif()
    endforeach()
    foreach(unionarg ${_SCOREP_UNION_SETTINGS})
        foreach(i 1 2)
            set(priority${i} "")
            set(values${i} "")
            if(${prefix${i}}_${unionarg} MATCHES "^([0-9]+);(.*)$")
                set(priority${i} "${CMAKE_MATCH_1}")
                set(values${i} "${CMAKE_MATCH_2}")
            endif()
        endforeach()
        if(priority1 STREQUAL "" AND priority2 STREQUAL "")
            continue()
        endif()
        _scorep_compare_argument_values("${priority1}" "${values1}" "" "${priority2}" "${values2}" "" status)
        if(status STREQUAL "SUPERSEDES")
            set("SETTING_${unionarg}" "${${prefix2}_${unionarg}}")
        elseif(status STREQUAL "SUPERSEDED")
            set("SETTING_${unionarg}" "${${prefix1}_${unionarg}}")
        else()
            list(APPEND values1 ${values2})
            set("SETTING_${unionarg}" "${priority1};${values1}")
        endif()
    endforeach()
    foreach(setting ${_SCOREP_FLAG_SETTINGS} ${_SCOREP_CHOICE_SETTINGS} ${_SCOREP_UNION_SETTINGS})
        set("${prefix}_${setting}" "${SETTING_${setting}}" PARENT_SCOPE)
    endforeach()
endfunction()

# Internal function which transforms setting variables with a prefix into Score-P arguments.
function(_scorep_settings2arguments prefix result)
    set(arguments "")
    foreach(enablearg ${_SCOREP_FLAG_SETTINGS})
        if(${prefix}_${enablearg} MATCHES "^[0-9]+;([^;]+)(;([^;]*);(.*))?$")
            if(CMAKE_MATCH_1)
                if(CMAKE_MATCH_COUNT EQUAL 1)
                    list(APPEND arguments "--${enablearg}")
                else()
                    list(APPEND arguments "--${enablearg}${CMAKE_MATCH_3}${CMAKE_MATCH_4}")
                endif()
            else()
                list(APPEND arguments "--no${enablearg}")
            endif()
        elseif(${prefix}_${enablearg} MATCHES "^CONFLICT;[0-9]+;(.*)$")
            message(FATAL_ERROR "${CMAKE_MATCH_1}")
        endif()
    endforeach()
    foreach(paradigmarg ${_SCOREP_CHOICE_SETTINGS})
        if(${prefix}_${paradigmarg} MATCHES "^[0-9]+;([^;]*)(;(.*))?$")
            if(CMAKE_MATCH_COUNT EQUAL 1)
                list(APPEND arguments "--${paradigmarg}=${CMAKE_MATCH_1}")
            else()
                list(APPEND arguments "--${paradigmarg}=${CMAKE_MATCH_1}:${CMAKE_MATCH_3}")
            endif()
        elseif(${prefix}_${paradigmarg} MATCHES "^CONFLICT;[0-9]+;(.*)$")
            message(FATAL_ERROR "${CMAKE_MATCH_1}")
        endif()
    endforeach()
    if(${prefix}_io MATCHES "^[0-9]+;(.*)$")
        string(REPLACE ";" "," value "${CMAKE_MATCH_1}")
        list(APPEND arguments "--io=${value}")
    elseif(${prefix}_io MATCHES "^CONFLICT;[0-9]+;(.*)$")
        message(FATAL_ERROR "${CMAKE_MATCH_1}")
    endif()
    if(${prefix}_other MATCHES "^[0-9]+;(.*)$")
        list(APPEND arguments ${CMAKE_MATCH_1})
    elseif(${prefix}_other MATCHES "^CONFLICT;[0-9]+;(.*)$")
        message(FATAL_ERROR "${CMAKE_MATCH_1}")
    endif()
    set("${result}" "${arguments}" PARENT_SCOPE)
endfunction()

# Internal function which transforms target properties into setting variables with a prefix.
function(_scorep_properties2settings prefix language target)
    foreach(setting ${_SCOREP_FLAG_SETTINGS} ${_SCOREP_CHOICE_SETTINGS} ${_SCOREP_UNION_SETTINGS})
        get_target_property(value "${target}" "SCOREP_${language}_SETTING_${setting}")
        if(value STREQUAL "value-NOTFOUND")
            set("${prefix}_${setting}" "" PARENT_SCOPE)
        else()
            set("${prefix}_${setting}" "${value}" PARENT_SCOPE)
        endif()
    endforeach()
endfunction()

# Internal function which applies settings from variables with a prefix to a target.
function(_scorep_settings2properties prefix language target)
    foreach(setting ${_SCOREP_FLAG_SETTINGS} ${_SCOREP_CHOICE_SETTINGS} ${_SCOREP_UNION_SETTINGS})
        if(${prefix}_${setting} MATCHES "^CONFLICT;[0-9]+;(.*)$")
            message(FATAL_ERROR "${CMAKE_MATCH_1}")
        elseif(NOT ${prefix}_${setting} STREQUAL "")
            set_target_properties(
                "${target}"
                PROPERTIES "SCOREP_${language}_SETTING_${setting}"
                "${${prefix}_${setting}}"
            )
        endif()
    endforeach()
endfunction()

# Internal function which infers Score-P settings.
function(_scorep_infer_settings language prefix targets)
    _scorep_environment2settings("${language}" 1500 INFERRED)
    foreach(target IN LISTS targets)
        _scorep_link_dependency2settings("${target}" "${language}" 1500 TMP isempty)
        if(NOT isempty)
            _scorep_merge_settings(INFERRED TMP INFERRED)
        endif()
    endforeach()
    foreach(setting IN LISTS _SCOREP_FLAG_SETTINGS _SCOREP_CHOICE_SETTINGS _SCOREP_UNION_SETTINGS)
        set("${prefix}_${setting}" "${INFERRED_${setting}}" PARENT_SCOPE)
    endforeach()
endfunction()
